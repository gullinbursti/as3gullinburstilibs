private function getThroughPointControl(anchor:Point, control:Point, nextAnchor:Point):Point {
 
	var realControl : Point = new Point();
		realControl.x = 2 * control.x - (anchor.x + nextAnchor.x) / 2;
		realControl.y = 2 * control.y - (anchor.y + nextAnchor.y) / 2;
	
	return (realControl);
};


public class TweenUtil
{
	public function TweenUtil()
	{
	}

	public static function normalizeValue( start:Number, end:Number, value:Number, min:Number = 0, max:Number = 1 ):Number
	{
		if( value < start ) return min;
		if( value > end ) return max;
		
		var zeroed:Number = value - start;
		var diff:Number = end - start;
		
		return min + ( ( max - min ) * ( zeroed / diff ) );;
	}
	
}





// boolean(); // returns true or false (50% chance of true)
// boolean(0.8); // returns true or false (80% chance of true)
public static function boolean(chance:Number=0.5):Boolean {
	return (random() < chance);
}

// sign(); // returns 1 or -1 (50% chance of 1)
// sign(0.8); // returns 1 or -1 (80% chance of 1)
public static function sign(chance:Number=0.5):int {
	return (random() < chance) ? 1 : -1;
}

// bit(); // returns 1 or 0 (50% chance of 1)
// bit(0.8); // returns 1 or 0 (80% chance of 1)
public static function bit(chance:Number=0.5):int {
	return (random() < chance) ? 1 : 0;
}




public static function IsNumeric( inputStr : String ) : Boolean
{
    var obj:RegExp = /^(0|[1-9][0-9]*)$/;
    return obj.test(inputStr);
}

public static function StripHtmlTags( inputStr : String ) : String
{
return inputStr.replace(RegExp(/<.*?>/g),"" );
}

function trim(string) {
if (string.indexOf(" ") != -1) {
whiteIndex = string.indexOf(" ");
fst = string.slice(0, whiteIndex);
snd = string.slice(whiteIndex+1, string.length);
trim((fst+snd));
} else {
_root.noSpaces = string;
}
}


function LTrim(s:String):String {
var i=0;
while ((i<s.length) && (s.substr(i,1)==’ ‘)) i++;
return (s.substr(i,s.length-i));
}
 
function RTrim(s:String):String {
var i=s.length -1;
 
while ((i>0) && (s.substr(i,1)==’ ‘)) i–;
 
return (s.substr(0,i+1));
}

public class KeyControlCode
{
public static var KEY_BACKSPACE:uint=8;
public static var KEY_TAB:uint=9;
public static var KEY_ENTER:uint=13;
public static var KEY_SHIFT:uint=16;
public static var KEY_CONTROL:uint=17;
public static var KEY_PAUSE:uint=19;
public static var KEY_CAPSLOCK:uint=20;
public static var KEY_ESC:uint=27;
public static var KEY_SPACEBAR:uint=32;
public static var KEY_PAGEUP:uint=33;
public static var KEY_PAGEDOWN:uint=34;
public static var KEY_END:uint=35;
public static var KEY_HOME:uint=36;
public static var KEY_LEFT:uint=37;
public static var KEY_UP:uint=38;
public static var KEY_RIGHT:uint=39;
public static var KEY_DOWN:uint=40;
public static var KEY_INSERT:uint=45;
public static var KEY_DELETE:uint=46;
public static var KEY_0:uint=48;
public static var KEY_1:uint=49;
public static var KEY_2:uint=50;
public static var KEY_3:uint=51;
public static var KEY_4:uint=52;
public static var KEY_5:uint=53;
public static var KEY_6:uint=54;
public static var KEY_7:uint=55;
public static var KEY_8:uint=56;
public static var KEY_9:uint=57;
public static var KEY_A:uint=65;
public static var KEY_B:uint=66;
public static var KEY_C:uint=67;
public static var KEY_D:uint=68;
public static var KEY_E:uint=69;
public static var KEY_F:uint=70;
public static var KEY_G:uint=71;
public static var KEY_H:uint=72;
public static var KEY_I:uint=73;
public static var KEY_J:uint=74;
public static var KEY_K:uint=75;
public static var KEY_L:uint=76;
public static var KEY_M:uint=77;
public static var KEY_N:uint=78;
public static var KEY_O:uint=79;
public static var KEY_P:uint=80;
public static var KEY_Q:uint=81;
public static var KEY_R:uint=82;
public static var KEY_S:uint=83;
public static var KEY_T:uint=84;
public static var KEY_U:uint=85;
public static var KEY_V:uint=86;
public static var KEY_W:uint=87;
public static var KEY_X:uint=88;
public static var KEY_Y:uint=89;
public static var KEY_Z:uint=90;
public static var KEY_NUMPAD_0:uint=96;
public static var KEY_NUMPAD_1:uint=97;
public static var KEY_NUMPAD_2:uint=98;
public static var KEY_NUMPAD_3:uint=99;
public static var KEY_NUMPAD_4:uint=100;
public static var KEY_NUMPAD_5:uint=101;
public static var KEY_NUMPAD_6:uint=102;
public static var KEY_NUMPAD_7:uint=103;
public static var KEY_NUMPAD_8:uint=104;
public static var KEY_NUMPAD_9:uint=105;
public static var KEY_NUMPAD_MULTIPLY:uint=106;
public static var KEY_PLUS:uint=107;
public static var KEY_SUBTRACT:uint=109;
public static var KEY_DOT:uint=110;
public static var KEY_DIVISION:uint=111;
public static var KEY_F1:uint=112;
public static var KEY_F2:uint=113;
public static var KEY_F3:uint=114;
public static var KEY_F4:uint=115;
public static var KEY_F5:uint=116;
public static var KEY_F6:uint=117;
public static var KEY_F7:uint=118;
public static var KEY_F8:uint=119;
public static var KEY_F9:uint=120;
public static var KEY_F11:uint=122;
public static var KEY_F12:uint=123;
public static var KEY_F13:uint=124;
public static var KEY_F14:uint=125;
public static var KEY_F15:uint=126;
public static var KEY_NUMLOCK:uint=144;
public static var KEY_SCROLLLOCK:uint=145;
public static var KEY_SEMICOLON:uint=186;
public static var KEY_EQUAL:uint=187;
public static var KEY_COMMA:uint=188;
public static var KEY_MINUS:uint=189;
public static var KEY_PERIOD:uint=190;
public static var KEY_SLASH:uint=191;
public static var KEY_BACKQUOTE:uint=192;
public static var KEY_LEFTBRACKET:uint=219;
public static var KEY_BACKSLASH:uint=220;
public static var KEY_RIGHTBRACKET:uint=221;
public static var KEY_QUOTE:uint=222;
}
}


Color:
var t:uint=0×77ff8877
var s:uint=0xff000000
var h:uint=t&s
var m:uint=h>>>24
trace(m);

DEC 2 HEX:
decimalValue.toString(16);


Color Channels:
red = color24 >> 16;
green = color24 >> 8 & 0xFF;
blue = color24 & 0xFF;
alpha = color32 >> 24;
red = color32 >> 16 & 0xFF;
green = color32 >> 8 & 0xFF;
blue = color232 & 0xFF;

Channel Convert:
color24 = red << 16 | green << 8 | blue;
color32 = alpha << 24 | red << 16 | green << 8 | blue;


Rotate 2D Vector:
public function rotate(angle : Number) : void {
 
 
	var sin : Number = Math.sin(angle);
	var cos : Number = Math.cos(angle);
 
	var oldX : Number = x;
	var oldY : Number = y;	
 
	x = oldX * cos - oldY * sin;
	y = oldX * sin + oldY * cos;
}

RND COlor:
0xffffff*Math.random());


protected function getAnglesDiff(alfa : Number, gamma : Number) : Number {
 
	var dif : Number = (alfa - gamma) % 360;
 
	if (dif != dif % 180) {
 
		dif = (dif < 0) ? dif + 360 : dif - 360;
	}
	return dif;
}